# TODO: we should make use of BUILDPLATFORM and TARGETPLATFORM to figure out cross compiling
#  as mentioned here: docker.com/blog/faster-multi-platform-builds-dockerfile-cross-compilation-guide
#  then we could use the host architecture to simply compile to the target architecture without
#  emulating the target architecture (thereby making the build hyper slow). the general gist is
#  we add arm (or whatever architecture) repositories to apt and then install our dependencies
#  with the architecture suffix, eg. :arm64. then we just need to set a bunch of cmake variables
#  probably with the use of a cmake toolchain file so that cmake can make sure to use the
#  binaries that can target the target architecture. from there bob is your uncle maybe..

####################################################################
FROM ubuntu:24.04 AS builder
LABEL org.opencontainers.image.authors="Kevin Kreiser <kevinkreiser@gmail.com>"

ARG CONCURRENCY
ARG ADDITIONAL_TARGETS

# set paths
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/lib32:/usr/lib32
RUN export DEBIAN_FRONTEND=noninteractive && apt update && apt install -y sudo

# install deps
WORKDIR /usr/local/src/valhalla
COPY ./scripts/install-linux-deps.sh /usr/local/src/valhalla/scripts/install-linux-deps.sh
RUN bash /usr/local/src/valhalla/scripts/install-linux-deps.sh
COPY ./scripts/install-linux-deps-extra.sh /usr/local/src/valhalla/scripts/install-linux-deps-extra.sh
RUN bash /usr/local/src/valhalla/scripts/install-linux-deps-extra.sh
RUN rm -rf /var/lib/apt/lists/*

# get the code into the right place and prepare to build it
ADD . .
RUN ls -la
RUN git submodule sync && git submodule update --init --recursive
RUN rm -rf build && mkdir build

# configure the build with symbols turned on so that crashes can be triaged
WORKDIR /usr/local/src/valhalla/build
# switch back to -DCMAKE_BUILD_TYPE=RelWithDebInfo and uncomment the block below if you want debug symbols
RUN cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=gcc -DENABLE_SINGLE_FILES_WERROR=Off
RUN make all ${ADDITIONAL_TARGETS} -j${CONCURRENCY:-$(nproc)}
RUN make install

# we wont leave the source around but we'll drop the commit hash we'll also keep the locales
WORKDIR /usr/local/src
RUN cd valhalla && echo "https://github.com/valhalla/valhalla/tree/$(git rev-parse HEAD)" > ../valhalla_version
RUN for f in valhalla/locales/*.json; do cat ${f} | python3 -c 'import sys; import json; print(json.load(sys.stdin)["posix_locale"])'; done > valhalla_locales
RUN rm -rf valhalla

# the binaries are huge with all the symbols so we strip them but keep the debug there if we need it
#WORKDIR /usr/local/bin
#RUN for f in valhalla_*; do objcopy --only-keep-debug $f $f.debug; done
#RUN tar -cvf valhalla.debug.tar valhalla_*.debug && gzip -9 valhalla.debug.tar
#RUN rm -f valhalla_*.debug
#RUN strip --strip-debug --strip-unneeded valhalla_* || true
#RUN strip /usr/local/lib/libvalhalla.a
#RUN strip /usr/local/lib/python3.12/dist-packages/valhalla/python_valhalla*.so

####################################################################
# copy the important stuff from the build stage to the runner image
FROM ubuntu:24.04 AS runner
LABEL org.opencontainers.image.authors="Kevin Kreiser <kevinkreiser@gmail.com>"

# basic paths
ENV PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH
ENV LD_LIBRARY_PATH=/usr/local/lib:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/lib32:/usr/lib32

# github packaging niceties
LABEL org.opencontainers.image.description="Open Source Routing Engine for OpenStreetMap and Other Datasources"
LABEL org.opencontainers.image.source="https://github.com/valhalla/valhalla"

# we need to add back some runtime dependencies for binaries and scripts
# install all the posix locales that we support
RUN export DEBIAN_FRONTEND=noninteractive && apt update && \
  apt install -y \
  libcurl4 libczmq4 libluajit-5.1-2 libgdal34 \
  libprotobuf-lite32 libsqlite3-0 libsqlite3-mod-spatialite libzmq5 zlib1g \
  curl gdb locales parallel python3-minimal python-is-python3 python3-shapely python3-requests \
  spatialite-bin unzip wget && rm -rf /var/lib/apt/lists/*

# grab the builder stages artifacts
COPY --from=builder /usr/local /usr/local
COPY --from=builder /usr/local/lib/python3.12/dist-packages/valhalla/* /usr/local/lib/python3.12/dist-packages/valhalla/

RUN cat /usr/local/src/valhalla_locales | xargs -d '\n' -n1 locale-gen

COPY ./scripts/tiles_folder_builder.sh /usr/local/src/valhalla/scripts/tiles_folder_builder.sh

# Generate routing tiles
COPY ./extra_scripts/update_traffic.py /usr/local/src/valhalla/scripts/update_traffic.py
RUN mkdir valhalla_tiles
# RUN bash /usr/local/src/valhalla/scripts/tiles_folder_builder.sh https://download.geofabrik.de/europe/andorra-latest.osm.pbf
# RUN cd valhalla_tiles; wget --no-check-certificate https://download.geofabrik.de/europe/andorra-latest.osm.pbf -O andorra.osm.pbf

# # Generate the config
# RUN cd valhalla_tiles; valhalla_build_config --mjolnir-tile-dir ${PWD}/valhalla_tiles --mjolnir-timezone ${PWD}/valhalla_tiles/timezones.sqlite --mjolnir-admin ${PWD}/valhalla_tiles/admins.sqlite --mjolnir-traffic-extract ${PWD}/traffic.tar > valhalla_raw.json

# # Remove unused options to keep service output clean of errors
# RUN cd valhalla_tiles; sed -e '/elevation/d' -e '/tile_extract/d' valhalla_raw.json > valhalla.json

# RUN cd valhalla_tiles; valhalla_build_tiles -c valhalla.json andorra.osm.pbf
# RUN cd valhalla_tiles; find valhalla_tiles | sort -n | tar cf valhalla_tiles.tar --no-recursion -T -

# ###### Add predicted traffic information


# # Update routing tiles with traffic information
# # Create hierarchy of directories for traffic tiles with the same structure as the graph tiles
# RUN cd /valhalla_tiles; mkdir traffic; cd valhalla_tiles; find . -type d -exec mkdir -p -- ../traffic/{} \;

# # Generate osm ways to valhalla edges mapping:
# RUN cd valhalla_tiles; valhalla_ways_to_edges --config valhalla.json
# # ^ This generates a file with mappings at valhalla_tiles/way_edges.txt. The warning about traffic can be safely ignored.

# # In order to find the osm id of a way, go to osm editor, edit, click on road, view on openstreetmap.org, check URL
# # Let's update the traffic for openstreetmap.org/way/173167308
# # Generate a csv with speeds for all edges
# COPY update_traffic.py valhalla_tiles/traffic/update_traffic.py
# RUN cd /valhalla_tiles/traffic; python3 update_traffic.py 173167308 /valhalla_tiles/valhalla_tiles/way_edges.txt

# # Move the csv file to the expected location in the tile hierarchy
# # All valhalla edges for this osm way id have the same tile id, so just get the first one from the mapping
# RUN cd /valhalla_tiles/traffic; \
#     edge_id=`grep 173167308 /valhalla_tiles/valhalla_tiles/way_edges.txt | cut -d ',' -f3`; \
#     mv traffic.csv `valhalla_traffic_demo_utils --get-traffic-dir $edge_id`

# # Add traffic information to the routing tiles
# RUN cd /valhalla_tiles; valhalla_add_predicted_traffic -t traffic --config valhalla.json


# ###### Add live traffic information

# # Generate the traffic archive
# RUN valhalla_traffic_demo_utils --config /valhalla_tiles/valhalla.json --generate-live-traffic 1/47701/0,20,`date +%s`

# python smoke test
RUN python3 -c "import valhalla,sys; print(sys.version, valhalla)"
